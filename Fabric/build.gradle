plugins {
	id "fabric-loom" version "1.1.14"
}

archivesBaseName = "${project.mod_name}-fabric-${project.minecraft_version}"

repositories {
	maven {
		url = "https://maven.siphalor.de"
		content { includeGroup "de.siphalor" }
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
	modImplementation fabricApi.module("fabric-key-binding-api-v1", project.fabric_api_version)
	modLocalRuntime fabricApi.module("fabric-resource-loader-v0", project.fabric_api_version)
	
	implementation project(":Xplat")
	
	//integrations
	modCompileOnly("de.siphalor:${project.amecsapi_artifactid}:${project.amecsapi_version}") { transitive = false }
	modCompileOnly("de.siphalor:${project.nmuk_artifactid}:${project.nmuk_version}") { transitive = false }
	
	//would you like them at runtime too? (re-setup IDE integrations after changing, or just use runClient task)
	def amecsRuntime = true
	def nmukRuntime = true
	if(amecsRuntime) {
		modLocalRuntime("de.siphalor:${project.amecsapi_artifactid}:${project.amecsapi_version}") { transitive = false }
		modLocalRuntime("de.siphalor:${project.amecs_artifactid}:${project.amecs_version}") { transitive = false }
	}
	if(nmukRuntime) modLocalRuntime("de.siphalor:${project.nmuk_artifactid}:${project.nmuk_version}") { transitive = false }
	if(amecsRuntime || nmukRuntime) modLocalRuntime "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
}

//fold in xplat resources and sources
processResources {
	from project(":Xplat").sourceSets.main.resources
}

tasks.withType(JavaCompile) {
	source(project(":Xplat").sourceSets.main.allSource)
}

//loom doesn't generate run configs by default in subprojects
loom {
	runs {
		client {
			client()
			setConfigName("Fabric Client")
			ideConfigGenerated(true)
			runDir("./run")
		}
		server {
			server()
			setConfigName("Fabric Server")
			ideConfigGenerated(true)
			runDir("./run")
		}
	}
	
	//nor can it figure out the refmap name in this situation
	mixin {
		defaultRefmapName = "${project.mod_name}.refmap.json"
	}
}